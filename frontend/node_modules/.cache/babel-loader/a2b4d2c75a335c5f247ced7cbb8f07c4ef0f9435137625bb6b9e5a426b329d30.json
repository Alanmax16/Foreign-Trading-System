{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const tradeAPI = {\n  // Get current exchange rates\n  getExchangeRates: () => api.get('/rates'),\n  // Execute a trade\n  executeTrade: tradeData => api.post('/trades', tradeData),\n  // Get trade history\n  getTradeHistory: filters => api.get('/trades/history', {\n    params: filters\n  }),\n  // Get user portfolio\n  getPortfolio: () => api.get('/portfolio'),\n  // Get dashboard statistics\n  getDashboardStats: () => api.get('/dashboard/stats')\n};\nexport const userAPI = {\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  // Update user profile\n  updateProfile: userData => api.put('/users/profile', userData),\n  // Get user balance\n  getBalance: () => api.get('/users/balance')\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","tradeAPI","getExchangeRates","get","executeTrade","tradeData","post","getTradeHistory","filters","params","getPortfolio","getDashboardStats","userAPI","getProfile","updateProfile","userData","put","getBalance"],"sources":["C:/Users/AlanM/OneDrive/Desktop/Foreign_Trading_System/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const tradeAPI = {\n  // Get current exchange rates\n  getExchangeRates: () => api.get('/rates'),\n  \n  // Execute a trade\n  executeTrade: (tradeData) => api.post('/trades', tradeData),\n  \n  // Get trade history\n  getTradeHistory: (filters) => api.get('/trades/history', { params: filters }),\n  \n  // Get user portfolio\n  getPortfolio: () => api.get('/portfolio'),\n  \n  // Get dashboard statistics\n  getDashboardStats: () => api.get('/dashboard/stats')\n};\n\nexport const userAPI = {\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  \n  // Update user profile\n  updateProfile: (userData) => api.put('/users/profile', userData),\n  \n  // Get user balance\n  getBalance: () => api.get('/users/balance')\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,QAAQ,GAAG;EACtB;EACAC,gBAAgB,EAAEA,CAAA,KAAMb,GAAG,CAACc,GAAG,CAAC,QAAQ,CAAC;EAEzC;EACAC,YAAY,EAAGC,SAAS,IAAKhB,GAAG,CAACiB,IAAI,CAAC,SAAS,EAAED,SAAS,CAAC;EAE3D;EACAE,eAAe,EAAGC,OAAO,IAAKnB,GAAG,CAACc,GAAG,CAAC,iBAAiB,EAAE;IAAEM,MAAM,EAAED;EAAQ,CAAC,CAAC;EAE7E;EACAE,YAAY,EAAEA,CAAA,KAAMrB,GAAG,CAACc,GAAG,CAAC,YAAY,CAAC;EAEzC;EACAQ,iBAAiB,EAAEA,CAAA,KAAMtB,GAAG,CAACc,GAAG,CAAC,kBAAkB;AACrD,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACrB;EACAC,UAAU,EAAEA,CAAA,KAAMxB,GAAG,CAACc,GAAG,CAAC,gBAAgB,CAAC;EAE3C;EACAW,aAAa,EAAGC,QAAQ,IAAK1B,GAAG,CAAC2B,GAAG,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAEhE;EACAE,UAAU,EAAEA,CAAA,KAAM5B,GAAG,CAACc,GAAG,CAAC,gBAAgB;AAC5C,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}